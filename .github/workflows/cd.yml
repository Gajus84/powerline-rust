name: Build and Test

on:
  push:
    paths-ignore:
      - "*.md"
      - LICENSE
      - rustfmt.toml
      - examples/**
      - .github/dependabot.yml
      - .github/workflows/pull_requests.yml
      - .gitigore
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1
      - name: Install cargo tarpaulin
        run: cargo install cargo-tarpaulin
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features
      - uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: --out Xml
      - uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
        if: always()
  make_multiarch:
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - arm-unknown-linux-musleabihf
    name: Make multi-arch binaries
    if: github.event_name != 'pull_request'
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build bare version
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: true
          args: --release --target=${{ matrix.target }} --no-default-features --features=bare-shell,libgit,cli-options,time
      - name: rename bare binary
        run: mv target/$TARGET/release/powerline target/$TARGET/release/powerline-bare
        env:
          TARGET: ${{ matrix.target }}
      - name: Build bash version
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: true
          args: --release --target=${{ matrix.target }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: target
          path: target/**/release/powerline*
  package:
    name: Build deb packages
    if: github.event_name != 'pull_request'
    needs: make_multiarch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: target
      - name: Set up Ruby 3.0
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
          bundler-cache: true
          working-directory: ./packaging
      - name: Make deb package
        working-directory: ./packaging
        run: |
          export DEB_VERSION="$(cat ../Cargo.toml | grep "^version = " | awk  '{gsub(/"/, "", $3); print $3}')-$(printf "%04d" $GITHUB_RUN_NUMBER)"          
          find . -type f \( -name "powerline" -o -name "powerline-bare" \) -exec chmod +x {} \;
          for build in amd64,x86_64-unknown-linux-musl armhf,arm-unknown-linux-musleabihf; do
            IFS=',' read arch target <<< "${build}";
            bundle exec fpm -f \
            -s dir \
            -t deb \
            --deb-priority optional \
            --maintainer github@growse.com \
            --vendor github@growse.com \
            --license MIT \
            -n $DEB_NAME \
            --description "$APPDESCRIPTION" \
            --url $APPURL \
            --prefix / \
            -a ${arch} \
            -v $DEB_VERSION \
            ../${target}/release/powerline=/usr/bin/powerline-rust \
            ../${target}/release/powerline-bare=/usr/bin/powerline-rust-bare
          done
        env:
          DEB_NAME: powerline-rust
          APPDESCRIPTION: powerline-shell written in Rust
          APPURL: https://github.com/growse/powerline-rust
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: debfiles
          path: "packaging/*.deb"
      - name: Upload to Apt repo
        working-directory: ./packaging
        env:
          APT_KEY_PASSPHRASE: ${{ secrets.APT_KEY_PASSPHRASE }}
          APT_CREDENTIALS: ${{ secrets.APT_CREDENTIALS }}
        run: |
          echo $APT_CREDENTIALS > aptly-auth
          find -maxdepth 1 -name "*.deb" -exec curl -f --netrc-file aptly-auth -XPOST -F file=@{} https://apttoo.growse.com/api/files/powerline \;
          export result=$(curl -f --netrc-file aptly-auth -X POST https://apttoo.growse.com/api/repos/defaultrepo/file/powerline)
          echo $result
          export failed=$(echo $result | jq '.FailedFiles | length')
          if [[ "$failed" != "0" ]]; then exit 1; fi
          curl -f --netrc-file aptly-auth -X PUT -H"Content-type: application/json" --data '{"Signing":{"Passphrase":"'"$APT_KEY_PASSPHRASE"'","Batch":true}}' https://apttoo.growse.com/api/publish/:./stablish

